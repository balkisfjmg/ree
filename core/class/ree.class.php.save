<?php

/* This file is part of Jeedom.
 *
 * Jeedom is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Jeedom is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Jeedom. If not, see <http://www.gnu.org/licenses/>.
 */

/* * ***************************Includes********************************* */
require_once __DIR__  . '/../../../../core/php/core.inc.php';

class ree extends eqLogic {
    /*     * *************************Attributs****************************** */



    /*     * ***********************Methode static*************************** */

    /*
     * Fonction exécutée automatiquement toutes les minutes par Jeedom
      public static function cron() {

      }
     */


    /*
     * Fonction exécutée automatiquement toutes les heures par Jeedom
      public static function cronHourly() {

      }
     */

    /*
     * Fonction exécutée automatiquement tous les jours par Jeedom
      public static function cronDaily() {

      }
     */



    /*     * *********************Méthodes d'instance************************* */

    public function preInsert() {
        
    }

    public function postInsert() {
        
    }

    public function preSave() {
         
    }

    public function postSave() {
        $refresh = $this->getCmd(null, 'refresh');
                if (!is_object($refresh)) {
                        $refresh = new reeCmd();
                        $refresh->setName(__('Rafraichir', __FILE__));
                }
                $refresh->setEqLogic_id($this->getId());
                $refresh->setLogicalId('refresh');
                $refresh->setType('action');
                $refresh->setSubType('other');
                $refresh->save();

        for ($x = 0; $x <= 23; $x++) {
                    $info = $this->getCmd(null, (string)$x);
                    if (!is_object($info)) {
                            $info = new reeCmd();
                            $info->setName(__((string)$x, __FILE__));
                    }
                    $info->setLogicalId((string)$x);
                    $info->setEqLogic_id($this->getId());
                    $info->setType('info');
                    $info->setSubType('string');
                    $info->save();
        }

    }

    public function preUpdate() {
        
    }

    public function postUpdate() {
        
    }

    public function preRemove() {
        
    }

    public function postRemove() {
        
    }

    /*
     * Non obligatoire mais permet de modifier l'affichage du widget si vous en avez besoin
      public function toHtml($_version = 'dashboard') {

      }
     */

    /*
     * Non obligatoire mais ca permet de déclencher une action après modification de variable de configuration
    public static function postConfig_<Variable>() {
    }
     */

    /*
     * Non obligatoire mais ca permet de déclencher une action avant modification de variable de configuration
    public static function preConfig_<Variable>() {
    }
     */

    /*     * **********************Getteur Setteur*************************** */
}

class reeCmd extends cmd {
    /*     * *************************Attributs****************************** */


    /*     * ***********************Methode static*************************** */


    /*     * *********************Methode d'instance************************* */

    /*
     * Non obligatoire permet de demander de ne pas supprimer les commandes même si elles ne sont pas dans la nouvelle configuration de l'équipement envoyé en JS
      public function dontRemoveCmd() {
      return true;
      }
     */

    public function execute($_options = array()) {
	        if ($this->getLogicalId() == 'refresh')
	        {

                $fecha_actual = date("Y-m-d");
                //sumo 1 dÃ­a
                $fecha_siguiente = date("Y-m-d",strtotime($fecha_actual."- 5 days"));

                $ch = curl_init();
                //$token = "b805537ae26734f701144f81b253e33652040985b9cf020d3ad10b81ffd00e48";  //Solicitar token
                //$eqConfig = $this->getConfigKey();
                $token = config::byKey('param1', 'ree');
                $eqLogic = $this->getEqLogic();
		$seltaux = $eqLogic->getConfiguration('taux');
                switch ($seltaux) {
                	case "PVPC":
        			$taux = "1013";
        			break;
    			case "PVPC 2.0 DHA":
        			$taux = "1014";
        			break;
    			case "pastel":
        			$taux = "1015";
       				break;
		}
                $headers = array(
                        "Accept: application/json; application/vnd.esios-api-v1+json",
                        "Content-Type: application/json",
                        "Host: api.esios.ree.es",
                        "Authorization: Token token=" . $token,
                        "Cookie: "
                );

                curl_setopt($ch, CURLOPT_URL,"https://api.esios.ree.es/indicators/" . $taux . "?start_date=" . $fecha_siguiente . "T00:00:00&end_date=" . $fecha_siguiente . "T23:50:00");
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

                $response = curl_exec($ch);

                curl_close($ch);
                $obj=json_decode($response,true);


               // On rÃ©cupÃ¨re l'Ã©quipement Ã  partir de l'identifiant fournit par la commande
               $reeObj = ree::byId($this->getEqlogic_id());
               // On rÃ©cupÃ¨re la commande 'data' appartenant Ã  l'Ã©quipement
               for ($x = 0; $x <= 23; $x++) {
                   $dataCmd = $reeObj->getCmd('info', (string)$x);
                   $dataCmd->event($obj['indicator']['values'][$x]['value'] / 1000);
                   //$dataCmd->event($globalp1);
                   $dataCmd->save();
                   }
               }

    }


    /*     * **********************Getteur Setteur*************************** */
}


